import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import TariffCard from './TariffCard';

// –¢–∏–ø–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ—ñ–≤
interface Tariff {
  _id: string;
  name: string;
  description: string;
  price: number;
  speed: string;
  features: string[];
  isActive: boolean;
  category: 'home' | 'business';
}

interface TariffRecommendationProps {
  onSelectTariff: (tariffName: string) => void; // –î–æ–¥–∞—î–º–æ prop –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É
}

const TariffRecommendation: React.FC<TariffRecommendationProps> = ({ onSelectTariff }) => {
  // –°—Ç–∞–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏
  const [step, setStep] = useState(1);
  const [deviceCount, setDeviceCount] = useState<number>(0);
  const [usageType, setUsageType] = useState<string[]>([]);
  const [needsStaticIp, setNeedsStaticIp] = useState<boolean | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
  const [allTariffs, setAllTariffs] = useState<Tariff[]>([]);
  const [recommendedTariff, setRecommendedTariff] = useState<Tariff | null>(null);
  const [isFormCompleted, setIsFormCompleted] = useState(false);
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤
  useEffect(() => {
    const fetchTariffs = async () => {
      try {
        const response = await fetch('/api/public/tariffs');
        if (response.ok) {
          const data = await response.json();
          setAllTariffs(data.tariffs || []);
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤:', error);
      }
    };
    
    fetchTariffs();
  }, []);
  
  // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  const usageOptions = [
    { id: 'browsing', label: '–í–µ–±-—Å–µ—Ä—Ñ—ñ–Ω–≥', icon: 'üåê', weight: 1 },
    { id: 'email', label: '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞', icon: 'üìß', weight: 1 },
    { id: 'social', label: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ', icon: 'üë•', weight: 2 },
    { id: 'streaming', label: '–ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–µ–æ (YouTube, Netflix)', icon: 'üì∫', weight: 4 },
    { id: 'gaming', label: '–û–Ω–ª–∞–π–Ω-—ñ–≥—Ä–∏', icon: 'üéÆ', weight: 5 },
    { id: 'work', label: '–í—ñ–¥–¥–∞–ª–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞', icon: 'üíº', weight: 3 },
    { id: 'video-calls', label: '–í—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∏', icon: 'üìπ', weight: 3 },
    { id: 'downloads', label: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤', icon: 'üì•', weight: 4 },
    { id: 'streaming-4k', label: '–°—Ç—Ä—ñ–º—ñ–Ω–≥ 4K –≤—ñ–¥–µ–æ', icon: 'üé¨', weight: 6 },
  ];
  
  // –¢–∏–ø–∏ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ 
  const deviceTypes = [
    { id: 'phone', label: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', icon: 'üì±', example: '1-2' },
    { id: 'tablet', label: '–ü–ª–∞–Ω—à–µ—Ç', icon: 'üì±', example: '1-2' },
    { id: 'laptop', label: '–ù–æ—É—Ç–±—É–∫/–ü–ö', icon: 'üíª', example: '1-3' },
    { id: 'tv', label: 'Smart TV', icon: 'üì∫', example: '1-2' },
    { id: 'console', label: '–Ü–≥—Ä–æ–≤–∞ –∫–æ–Ω—Å–æ–ª—å', icon: 'üéÆ', example: '0-2' },
    { id: 'smart-home', label: '–†–æ–∑—É–º–Ω–∏–π –¥—ñ–º', icon: 'üè†', example: '0-10+' },
  ];
  
  // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
  const handleNextStep = () => {
    if (step < 3) {
      setStep(step + 1);
    } else {
      // –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫
      findRecommendedTariff();
    }
  };
  
  // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É
  const handlePrevStep = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };
  
  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
  const handleUsageToggle = (id: string) => {
    if (usageType.includes(id)) {
      setUsageType(usageType.filter(type => type !== id));
    } else {
      setUsageType([...usageType, id]);
    }
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É
  const findRecommendedTariff = () => {
    setIsSubmitting(true);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —Ç–∞ —Ç–∏–ø—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    let requiredSpeed = 0;
    
    // –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ 10-15 –ú–±—ñ—Ç/—Å –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π)
    requiredSpeed += deviceCount * 15;
    
    // –î–æ–¥–∞—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    usageType.forEach(usage => {
      const option = usageOptions.find(opt => opt.id === usage);
      if (option) {
        requiredSpeed += option.weight * 10; // –ú–Ω–æ–∂–∏–º–æ –≤–∞–≥—É –Ω–∞ –±–∞–∑–æ–≤–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç
      }
    });
    
    // –Ø–∫—â–æ —î –≤—ñ–¥–µ–æ—Å—Ç—Ä—ñ–º—ñ–Ω–≥ –∞–±–æ —ñ–≥—Ä–∏, –¥–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∞—Å
    if (usageType.includes('streaming-4k') || usageType.includes('gaming')) {
      requiredSpeed += 50;
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ —Ç–∞—Ä–∏—Ñ–∏ –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é
    const sortedTariffs = [...allTariffs]
      .filter(tariff => tariff.isActive && tariff.category === 'home')
      .sort((a, b) => {
        // –û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ "100/100 –ú–±—ñ—Ç/—Å" –æ—Ç—Ä–∏–º—É—î–º–æ 100)
        const speedA = parseInt(a.speed.split('/')[0]);
        const speedB = parseInt(b.speed.split('/')[0]);
        return speedA - speedB;
      });
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞—Ä–∏—Ñ, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–±–æ –ø–µ—Ä–µ–≤–∏—â—É—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å
    let recommended = sortedTariffs.find(tariff => {
      const tariffSpeed = parseInt(tariff.speed.split('/')[0]);
      return tariffSpeed >= requiredSpeed;
    });
    
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π—à–≤–∏–¥—à–∏–π
    if (!recommended && sortedTariffs.length > 0) {
      recommended = sortedTariffs[sortedTariffs.length - 1];
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ
    setRecommendedTariff(recommended || null);
    setIsFormCompleted(true);
    setIsSubmitting(false);
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ —ñ –ø–æ—á–∞—Ç–∫—É –∑–Ω–æ–≤—É
  const resetForm = () => {
    setStep(1);
    setDeviceCount(0);
    setUsageType([]);
    setNeedsStaticIp(null);
    setRecommendedTariff(null);
    setIsFormCompleted(false);
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    handleNextStep();
  };
  
  return (
    <div className="w-full max-w-4xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="p-6 md:p-8">
        <h2 className="text-2xl font-bold text-blue-900 mb-6 text-center">
          –ü—ñ–¥–±–µ—Ä—ñ—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ
        </h2>
        
        {!isFormCompleted ? (
          <>
            {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É */}
            <div className="mb-8">
              <div className="flex justify-between mb-2">
                {[1, 2, 3].map(stepNumber => (
                  <div
                    key={stepNumber}
                    className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                      step >= stepNumber
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-500'
                    }`}
                  >
                    {stepNumber}
                  </div>
                ))}
              </div>
              <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden">
                <div
                  className="bg-blue-600 h-full transition-all duration-300"
                  style={{ width: `${((step - 1) / 2) * 100}%` }}
                ></div>
              </div>
            </div>
            
            <form onSubmit={handleSubmit}>
              <AnimatePresence mode="wait">
                {step === 1 && (
                  <motion.div
                    key="step1"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h3 className="text-xl font-semibold mb-4 text-blue-800">
                      –°–∫—ñ–ª—å–∫–∏ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –±—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É?
                    </h3>
                    <p className="text-gray-600 mb-6">
                      –í—Ä–∞—Ö–æ–≤—É–π—Ç–µ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ: —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏, –ø–ª–∞–Ω—à–µ—Ç–∏, –Ω–æ—É—Ç–±—É–∫–∏, —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä–∏ —Ç–æ—â–æ.
                    </p>
                    
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-8">
                      {[1, 2, 3, 4, 5, 6, 8, 10].map(count => (
                        <button
                          key={count}
                          type="button"
                          onClick={() => setDeviceCount(count)}
                          className={`p-4 rounded-lg border-2 transition-all hover:bg-blue-50 ${
                            deviceCount === count
                              ? 'border-blue-500 bg-blue-50 shadow-md'
                              : 'border-gray-200'
                          }`}
                        >
                          <div className="text-2xl mb-2">
                            {count === 10 ? '10+' : count}
                          </div>
                          <div className="text-sm text-gray-600">
                            {count === 1 ? '–ø—Ä–∏—Å—Ç—Ä—ñ–π' : count < 5 ? '–ø—Ä–∏—Å—Ç—Ä–æ—ó' : '–ø—Ä–∏—Å—Ç—Ä–æ—ó–≤'}
                          </div>
                        </button>
                      ))}
                    </div>
                    
                    <div className="border-t border-gray-200 pt-4">
                      <div className="flex flex-wrap gap-3 mb-3">
                        {deviceTypes.map(device => (
                          <div key={device.id} className="inline-flex items-center bg-gray-100 px-3 py-1 rounded-full text-sm">
                            <span className="mr-1">{device.icon}</span>
                            <span>{device.label}</span>
                            <span className="ml-1 text-gray-500 text-xs">
                              ({device.example})
                            </span>
                          </div>
                        ))}
                      </div>
                      <p className="text-sm text-gray-500 italic">
                        * –í–∫–∞–∑–∞–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∏–ø–æ–≤–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –¥–æ–º–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤—ñ
                      </p>
                    </div>
                  </motion.div>
                )}
                
                {step === 2 && (
                  <motion.div
                    key="step2"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h3 className="text-xl font-semibold mb-4 text-blue-800">
                      –î–ª—è —á–æ–≥–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç?
                    </h3>
                    <p className="text-gray-600 mb-6">
                      –û–±–µ—Ä—ñ—Ç—å –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–∞–º.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                      {usageOptions.map(option => (
                        <button
                          key={option.id}
                          type="button"
                          onClick={() => handleUsageToggle(option.id)}
                          className={`p-4 rounded-lg border-2 text-left transition-all hover:bg-blue-50 ${
                            usageType.includes(option.id)
                              ? 'border-blue-500 bg-blue-50 shadow-md'
                              : 'border-gray-200'
                          }`}
                        >
                          <div className="flex items-center">
                            <span className="text-2xl mr-3">{option.icon}</span>
                            <span className="text-lg">{option.label}</span>
                          </div>
                        </button>
                      ))}
                    </div>
                  </motion.div>
                )}
                
                {step === 3 && (
                  <motion.div
                    key="step3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h3 className="text-xl font-semibold mb-4 text-blue-800">
                      –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤–∞–º —Å—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞?
                    </h3>
                    <p className="text-gray-600 mb-6">
                      –°—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –º–µ—Ä–µ–∂–µ–≤–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤, —Ö–æ—Å—Ç–∏–Ω–≥—É —Å–µ—Ä–≤–µ—Ä—ñ–≤, –≤—ñ–¥–µ–æ—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ—â–æ.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                      <button
                        type="button"
                        onClick={() => setNeedsStaticIp(true)}
                        className={`p-6 rounded-lg border-2 text-left transition-all hover:bg-blue-50 ${
                          needsStaticIp === true
                            ? 'border-blue-500 bg-blue-50 shadow-md'
                            : 'border-gray-200'
                        }`}
                      >
                        <div className="flex items-center">
                          <span className="text-2xl mr-3">‚úÖ</span>
                          <div>
                            <span className="text-lg font-medium">–¢–∞–∫, –ø–æ—Ç—Ä—ñ–±–Ω–∞</span>
                            <p className="text-sm text-gray-600 mt-1">
                              –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ 50 –≥—Ä–Ω/–º—ñ—Å—è—Ü—å
                            </p>
                          </div>
                        </div>
                      </button>
                      
                      <button
                        type="button"
                        onClick={() => setNeedsStaticIp(false)}
                        className={`p-6 rounded-lg border-2 text-left transition-all hover:bg-blue-50 ${
                          needsStaticIp === false
                            ? 'border-blue-500 bg-blue-50 shadow-md'
                            : 'border-gray-200'
                        }`}
                      >
                        <div className="flex items-center">
                          <span className="text-2xl mr-3">‚ùå</span>
                          <div>
                            <span className="text-lg font-medium">–ù—ñ, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞</span>
                            <p className="text-sm text-gray-600 mt-1">
                              –î–∏–Ω–∞–º—ñ—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞ –ø—ñ–¥—ñ–π–¥–µ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è
                            </p>
                          </div>
                        </div>
                      </button>
                    </div>
                    
                    <div className="bg-blue-50 p-4 rounded-lg mb-6">
                      <h4 className="font-medium text-blue-800 mb-2">–ö–æ–ª–∏ –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—å —Å—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞:</h4>
                      <ul className="text-sm text-gray-700 space-y-1">
                        <li>‚Ä¢ –í—ñ–¥–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–æ–º–∞—à–Ω—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤</li>
                        <li>‚Ä¢ –•–æ—Å—Ç–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä—ñ–≤ (–≤–µ–±, –ø–æ—à—Ç–∞, —ñ–≥—Ä–æ–≤—ñ)</li>
                        <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∏ –≤—ñ–¥–µ–æ—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º</li>
                        <li>‚Ä¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö VPN</li>
                        <li>‚Ä¢ –û–Ω–ª–∞–π–Ω-—ñ–≥—Ä–∏ –∑ –≤–∏–¥—ñ–ª–µ–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º</li>
                      </ul>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
              
              <div className="flex justify-between mt-8">
                <button
                  type="button"
                  onClick={handlePrevStep}
                  className={`px-6 py-2 rounded-md border border-gray-300 text-gray-700 hover:bg-gray-50 ${
                    step === 1 ? 'invisible' : ''
                  }`}
                >
                  –ù–∞–∑–∞–¥
                </button>
                
                <button
                  type={step === 3 ? 'submit' : 'button'}
                  onClick={step < 3 ? handleNextStep : undefined}
                  disabled={
                    (step === 1 && deviceCount === 0) ||
                    (step === 2 && usageType.length === 0) ||
                    (step === 3 && needsStaticIp === null) ||
                    isSubmitting
                  }
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed"
                >
                  {step < 3 ? '–î–∞–ª—ñ' : isSubmitting ? '–ü—ñ–¥–±—ñ—Ä...' : '–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ'}
                </button>
              </div>
            </form>
          </>
        ) : (
          <div className="animate-fade-in">
            <div className="mb-6 text-center">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full text-green-500 mb-4">
                <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <h3 className="text-xl font-semibold text-blue-800">
                –ú–∏ –ø—ñ–¥—ñ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ
              </h3>
            </div>
            
            <div className="bg-blue-50 p-4 rounded-lg mb-6">
              <h4 className="font-medium text-blue-800 mb-2">–í–∞—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</h4>
              <ul className="text-gray-700 space-y-1">
                <li>‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤: <span className="font-medium">{deviceCount}</span></li>
                <li>‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <span className="font-medium">
                  {usageType.map(type => usageOptions.find(opt => opt.id === type)?.label).join(', ')}
                </span></li>
                <li>‚Ä¢ –°—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞: <span className="font-medium">{needsStaticIp ? '–¢–∞–∫' : '–ù—ñ'}</span></li>
              </ul>
            </div>
            
            {recommendedTariff ? (
              <div className="mx-auto max-w-md">
                <div className="text-center mb-4">
                  <span className="inline-block bg-blue-600 text-white px-4 py-1 rounded-full text-sm font-medium">
                    –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ
                  </span>
                </div>
                
                <div className="transform transition hover:scale-105">
                  <TariffCard
                    name={recommendedTariff.name}
                    description={recommendedTariff.description}
                    price={recommendedTariff.price + (needsStaticIp ? 50 : 0)} // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–Ω–æ—ó IP —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    speed={recommendedTariff.speed}
                    features={[
                      ...recommendedTariff.features,
                      ...(needsStaticIp ? ['–°—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞'] : [])
                    ]}
                    isPopular={true}
                    onSelect={() => onSelectTariff(recommendedTariff.name)}
                  />
                </div>
                
                {/* –î–æ–¥–∞—î–º–æ –æ–∫—Ä–µ–º—É –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –±—ñ–ª—å—à–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ
                <div className="mt-4 flex justify-center">
                  <button
                    onClick={() => onSelectTariff(recommendedTariff.name)}
                    className="w-full md:w-auto bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg transition-colors duration-300 transform hover:scale-105"
                  >
                    –ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                  </button>
                </div> */}
                
                <div className="text-center mt-6">
                  <p className="text-sm text-gray-600 mb-2">
                    {needsStaticIp && '–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –≤–∫–ª—é—á–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–æ—Å–ª—É–≥—É "–°—Ç–∞—Ç–∏—á–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞" (50 –≥—Ä–Ω/–º—ñ—Å)'}
                  </p>
                  <div className="flex justify-center space-x-3">
                    <button
                      onClick={resetForm}
                      className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                    >
                      –ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É
                    </button>
                    <button
                      onClick={() => window.location.href = '/tariffs'}
                      className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                      –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç–∞—Ä–∏—Ñ–∏
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center p-8">
                <p className="text-gray-600 mb-4">
                  –ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
                </p>
                <button
                  onClick={resetForm}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  –ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TariffRecommendation;